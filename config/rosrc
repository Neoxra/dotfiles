# ROS2
source /opt/ros/jazzy/setup.zsh

# Zenohd
export RMW_IMPLEMENTATION=rmw_zenoh_cpp

# For ros2 launch colorize
export RCUTILS_COLORIZED_OUTPUT=1
# Enable bash completion compatibility in zsh
# autoload -U +X compinit && compinit
# autoload -U +X bashcompinit && bashcompinit

# Alias
alias rtl="ros2 topic list"
alias rti="ros2 topic info"
alias rte="ros2 topic echo"
alias rth="ros2 topic hz"
alias rbi="ros2 bag info"

# Alias function
rr() {
  ros2 run "$@"
}

rl() {
  ros2 launch "$@"
}

run_foxglove()
{
  ros2 launch foxglove_bridge foxglove_bridge_launch.xml
}

g1_setup() {
  source /home/nick-bell/dotfiles/config/setup_unitree.sh
}

# Switch ROS_DOMAIN_ID between local pc and g1.
flipros()
{
  # Color codes
  local GREEN="\033[1;32m"
  local YELLOW="\033[1;33m"
  local BLUE="\033[1;34m"
  local RED="\033[1;31m"
  local RESET="\033[0m"

  if [[ $1 = "reset" ]]; then
    unset ROS_DOMAIN_ID
    echo -e "${RED}ROS_DOMAIN_ID has been unset.${RESET}"
    return
  fi

  local g1_id=0
  local my_id=69

  if [[ -z "${ROS_DOMAIN_ID+x}" ]]; then
    export ROS_DOMAIN_ID=$g1_id
    echo -e "${YELLOW}ROS_DOMAIN_ID not set. Defaulted to ${GREEN}$ROS_DOMAIN_ID.${RESET}"
    return
  fi

  if [[ $ROS_DOMAIN_ID = $g1_id ]]; then
    export ROS_DOMAIN_ID=$my_id
    echo "${BLUE}Switch to local ROS_DOMAIN_ID $ROS_DOMAIN_ID.${RESET}"
  else
    export ROS_DOMAIN_ID=$g1_id
    echo "${GREEN}Switch to G1 ROS_DOMAIN_ID $ROS_DOMAIN_ID.${RESET}"
  fi  
}

# Only usable under workspace or src.
ros2cd() {
  local ws_dir pkg_dir

  # Find workspace (assume script is run inside workspace or parent)
  if [[ -d "src" ]]; then
    ws_dir=$(pwd)
  elif [[ -d "../src" ]]; then
    ws_dir=$(dirname "$(pwd)")
  else
    echo "‚ùå Cannot find 'src' folder in current or parent directory."
    return 1
  fi

  # No argument: list all packages
  if [[ -z "$1" ]]; then
    echo "Available packages in ${ws_dir}/src:"
    find "${ws_dir}/src" -mindepth 1 -maxdepth 2 -type d -exec basename {} \; | sort
    return 0
  fi

  # Try to find matching directory
  pkg_dir=$(find "${ws_dir}/src" -type d -name "$1" -print -quit)
  if [[ -z "$pkg_dir" ]]; then
    echo "‚ùå Package '$1' not found under ${ws_dir}/src"
    return 1
  fi

  cd "$pkg_dir" || return
  echo "üì¶ Entered package: $(pwd)"
}
